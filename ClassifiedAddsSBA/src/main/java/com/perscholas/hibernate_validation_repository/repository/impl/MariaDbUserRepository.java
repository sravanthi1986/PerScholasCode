package com.perscholas.hibernate_validation_repository.repository.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.perscholas.hibernate_validation_repository.models.User;
import com.perscholas.hibernate_validation_repository.repository.UserRepository;


@Repository("mariaDbUserRepository")
public class MariaDbUserRepository implements UserRepository {

	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	
	@Override
	public Integer addUser(User user) {
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createCourseSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		
		params.addValue("username", user.getUsername());
		params.addValue("password", user.getPassword());
		String createAddSql = "insert into users (username, password) values "
				+ "(:username, :password)";
		
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createAddSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The Database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	private final class UserMapper implements RowMapper<User> {

		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			User add = new User();
			add.setUserId(rs.getInt(1));
			add.setUsername(rs.getString(2));
			add.setPassword(rs.getString(3));
			
			return add;
		}
	}

	@Override
	public User findUserByUsername(User input) {
		
		String selectUser = "SELECT * FROM users where username = :username";
		Map<String, Object> params = new HashMap<String, Object>();
		
		System.out.println(input.getUsername());
		System.out.println(input.getPassword());
		
		params.put("username", input.getUsername());
		
		try {
			User result = (User)mariaDbJdbcTemplate.queryForObject(selectUser, params, new UserMapper());
			return result;
		}catch(Exception e) {
			
			System.out.println("Unable to find it");
			return null;
		}
			
	}
	
}
