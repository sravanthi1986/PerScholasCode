package com.perscholas.hibernate_validation_repository.repository.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.perscholas.hibernate_validation_repository.models.Book;
import com.perscholas.hibernate_validation_repository.repository.BookRepository;

@Repository("mariaDbBookRepository")
public class MariaDbBookRepository implements BookRepository {

	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	
	@Override
	public List<Book> showBooks() {
		String selectBooks = "SELECT * FROM books";
		List<Book> result = mariaDbJdbcTemplate.query(selectBooks, 
				new BookMapper());
		return result;
	}

	@Override
	public Integer addBook(Book book) {
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createCourseSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		
		params.addValue("title", book.getTitle());
		params.addValue("author", book.getAuthor());
		String createBookSql = "insert into books (title, author) values "
				+ "(:title, :author)";
		
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createBookSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The Database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	@Override
	public Boolean removeBook(Integer bookId) {
		Integer result;
		String deleteSql = "delete from books where book_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", bookId);
		result = mariaDbJdbcTemplate.update(deleteSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}

	private final class BookMapper implements RowMapper<Book> {
		@Override
		public Book mapRow(ResultSet rs, int rowNum) throws SQLException {
			Book book = new Book();
			book.setBookId(rs.getInt(1));
			book.setTitle(rs.getString(2));
			book.setAuthor(rs.getString(3));
			return book;
		}
	}
}
