package com.perscholas.springmvc_jdbctemplate.repositories.impl;


import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.perscholas.springmvc_jdbctemplate.model.Student;
import com.perscholas.springmvc_jdbctemplate.repositories.StudentRepository;

/* The "@Repository" annotation identifies this class as a Spring bean. We 
 * have also named this bean to allow autowiring by name in case ambiguities 
 * exist if we attempt to inject the class by type. This is useful when 
 * classes implement interfaces as there is a high likelihood that another 
 * class will exist in the application that implements the same interface.*/
@Repository("mariaDbStudentRepository")
public class MariaDbStudentRepository implements StudentRepository {
	/* An instance of "NamedParameterJdbcTemplate" is injected here by the 
	 * Spring framework. The "NamedParameterJdbcTemplate" class is for the use 
	 * of named parameters which can be passed to the query string such as 
	 * in the "createStudent" method below.*/
	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;

	@Override
	public Integer createStudent(Student student) {
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createStudentSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("name", student.getName());
		params.addValue("email", student.getEmail());
		String createStudentSql = "insert into students (name, email) values "
				+ "(:name,:email)";
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createStudentSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}
	@Override
	public Student getStudentById(Integer id) {
		String selectStudentsById = "select * from students where student_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", id);
		Student student = null;
		try
		{
			/* The JdbcTemplate method "queryForObject" accepts a 
			 * query string, a parameter source which in this case is a Map, 
			 * and an instance of the class "StudentMapper".  The StudentMapper 
			 * method "mapRow" returns a Student instance, but the "queryForObject" 
			 * method returns an Object type. Therefore, the Object must be
			 * cast to the "Student" type. */
			student = (Student)mariaDbJdbcTemplate.queryForObject(
					selectStudentsById, params, new StudentMapper());
		}
		catch (EmptyResultDataAccessException e)
		{
			System.out.println(e.getMessage());
		}
		return student;
	}
	@Override
	public Boolean updateStudent(Student student) {
		Integer result;
		Map<String, Object> params = new HashMap<>();
		params.put("name", student.getName());
		params.put("email", student.getEmail());
		params.put("id", student.getStudentId());
		String updateSql = "update students set name = :name, email = :email where student_id = :id";
		result = mariaDbJdbcTemplate.update(updateSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	@Override
	public Boolean deleteStudent(Integer studentId) {
		Integer result;
		String deleteSql = "delete from students where student_id = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", studentId);
		result = mariaDbJdbcTemplate.update(deleteSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}
	@Override
	public List<Student> getAllStudents() throws ClassNotFoundException, IOException, SQLException {
		String selectStudents = "SELECT * FROM students";
		/* The JdbcTemplate "query" method accepts a query string and an instance 
		 * of the class "StudentMapper". It will map each row of the ResultSet 
		 * and add it to a List of "Student" type which will get assigned to 
		 * the List<Student> named "result" */
		List<Student> result = mariaDbJdbcTemplate.query(selectStudents, new StudentMapper());
		return result;
	}
	private final class StudentMapper implements RowMapper<Student> {
		@Override
		public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
			Student student = new Student();
			student.setStudentId(rs.getInt(1));
			student.setName(rs.getString(2));
			student.setEmail(rs.getString(3));
			return student;
		}
	}
}
