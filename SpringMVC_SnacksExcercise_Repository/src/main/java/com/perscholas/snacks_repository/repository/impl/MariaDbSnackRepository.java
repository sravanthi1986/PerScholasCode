package com.perscholas.snacks_repository.repository.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.perscholas.snacks_repository.model.Snacks;
import com.perscholas.snacks_repository.repository.SnackRepository;

@Repository("mariaDbBookRepository")
public class MariaDbSnackRepository implements SnackRepository {

	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	
	@Override
	public List<Snacks> showSnacks() {
		String selectSnacks = "SELECT * FROM snacks";
		List<Snacks> result = mariaDbJdbcTemplate.query(selectSnacks, 
				new SnackMapper());
		return result;
	}

	@Override
	public Integer addSnack(Snacks snacks) {
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createCourseSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		
		params.addValue("snacksname", snacks.getSnacksname());
		params.addValue("studentname", snacks.getStudentname());
		String createBookSql = "insert into snacks (snacksname, studentname) values "
				+ "(:snacksname, :studentname)";
		
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createBookSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The Database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	@Override
	public Boolean removeSnack(Integer snacksid) {
		Integer result;
		String deleteSql = "delete from snacks where snacksid = :id";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("id", snacksid);
		result = mariaDbJdbcTemplate.update(deleteSql, params);
		if (result > 0) {
			return true;
		}
		return false;
	}

	private final class SnackMapper implements RowMapper<Snacks> {
		@Override
		public Snacks mapRow(ResultSet rs, int rowNum) throws SQLException {
			Snacks snack = new Snacks();
			snack.setSnacksid(rs.getInt(1));
			snack.setSnacksname(rs.getString(2));
			snack.setStudentname(rs.getString(3));
			
			return snack;
		}
	}
}
